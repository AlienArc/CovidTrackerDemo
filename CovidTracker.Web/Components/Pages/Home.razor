@page "/{PageDateFilter:datetime?}"
@inherits ViewModelComponentBase<HomeViewModel>

<PageTitle>Covid Tracker</PageTitle>

<MudStack>
    <MudText Typo="Typo.h3">Covid Daily Statistics by State</MudText>

    <MudDataGrid Loading="_loading" T="StateDailyTotal" Items="@ViewModel.DailyTotals" Filterable="true" FilterMode="@DataGridFilterMode.ColumnFilterRow">
        <Columns>
            <PropertyColumn Property="x => x.Date" Title="Date" Sortable="false">
                <FilterTemplate>
                    <MudButton>@ViewModel.CurrentDate?.ToString("M/d/yyyy")</MudButton>
                    <MudIconButton OnClick="@OpenDateFilter" Icon="@_icon" Size="@Size.Small" /> 
                    <MudOverlay Visible="_dateFilterOpen" LightBackground="true"  OnClick="@(() => _dateFilterOpen = false)" />
                    <MudPopover Open="@_dateFilterOpen" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter" Style="width:150px">
                        <MudStack Spacing="0">
                            <MudDatePicker PickerOpened="OpeningDatePicker" @ref="_datePicker" PickerVariant="PickerVariant.Static" @bind-Date="ViewModel.CurrentDate" />
                            <MudStack Row="true">
                                <MudButton OnClick="@(() => ClearFilterAsync(context))">Cancel</MudButton>
                                <MudButton Color="@Color.Primary" OnClick="SetDate">Apply</MudButton>
                            </MudStack>
                        </MudStack>
                    </MudPopover>
                </FilterTemplate>
            </PropertyColumn>
            <PropertyColumn Property="x => x.State" Title="State" Sortable="true">
                    <FilterTemplate>
                        <MudIconButton OnClick="@OpenStateFilter" Icon="@_icon" Size="@Size.Small" /> 
                        <MudOverlay OnClick="@(() => _stateFilterOpen = false)" />
                        <MudPopover Open="@_stateFilterOpen" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter" Style="width:150px">
                            <MudStack Spacing="0">
                                <MudCheckBox T="bool" Label="Select All" Size="@Size.Small" Value="@_selectAll" ValueChanged="@SelectAll" />
                                <MudStack Spacing="0" Style="overflow-y:auto;max-height:250px">
                                    @foreach (var item in context.Items)
                                    {
                                        <MudCheckBox T="bool" Label="@($"{item.State}")" Size="@Size.Small" Value="@(_selectedItems.Contains(item))"
                                                        ValueChanged="@((value) => SelectedChanged(value, item))" />
                                    }
                                </MudStack>
                                <MudStack Row="true">
                                    <MudButton OnClick="@(() => ClearFilterAsync(context))">Clear</MudButton>
                                    <MudButton Color="@Color.Primary" OnClick="@(() => ApplyFilterAsync(context))">Filter</MudButton>
                                </MudStack>
                            </MudStack>
                        </MudPopover>
                    </FilterTemplate>

            </PropertyColumn>
            <PropertyColumn Property="x => x.TotalCases" Title="Total" Sortable="true" Filterable="false" />
            <PropertyColumn Property="x => x.PositiveCases" Title="Positive" Sortable="true" Filterable="false" />
            <PropertyColumn Property="x => x.NegativeCases" Title="Negative" Sortable="true" Filterable="false" />
            <PropertyColumn Property="x => x.Hospitalized" Title="Hospitalization Rates" Sortable="true" Filterable="false" />
        </Columns>
        <LoadingContent>
            <MudStack Row="true" Justify="Justify.Center" AlignItems="AlignItems.Center">
                <MudIcon Size="Size.Large" Icon="@Icons.Material.Outlined.EventNote"/>
                <MudText Typo="Typo.h4">Retrieving Covid Data...</MudText>
            </MudStack>
        </LoadingContent>
        <NoRecordsContent>
            <MudText>No records found. Please check your filter settings.</MudText>
        </NoRecordsContent>
        <PagerContent>
            <MudDataGridPager T="StateDailyTotal" />
        </PagerContent>
    </MudDataGrid>
</MudStack>


@code
{
    [Parameter]
    public DateTime? PageDateFilter { get; set; }

    MudDatePicker? _datePicker;
    //DateTime _currentDate;
    HashSet<StateDailyTotal> _selectedItems = new();
    HashSet<StateDailyTotal> _filterItems = new();
    bool _loading = false;
    FilterDefinition<StateDailyTotal> _filterDefinition = new();
    string _icon = Icons.Material.Outlined.FilterAlt;
    bool _stateFilterOpen = false;
    bool _dateFilterOpen = false;
    bool _selectAll = true;

    private async void SetDate(MouseEventArgs args)
    {
        //ViewModel.CurrentDate = new DateTime(2011, 6, 12);
        //_datePicker.GoToDate(ViewModel.CurrentDate.Value);
        _loading = true;
        StateHasChanged();
        await ViewModel.LoadData();
        _loading = false;
        _dateFilterOpen = false;
    }

    protected override void OnParametersSet()
    {
        if(PageDateFilter.HasValue)
        {
            ViewModel.CurrentDate = PageDateFilter.Value;
        }
    }

    protected override async void OnAfterRender(bool firstRender)
    {
        if(firstRender)
        {
            _loading = true;
            StateHasChanged();
            await ViewModel.LoadData();
            _loading = false;

            _selectedItems = ViewModel.DailyTotals!.ToHashSet();
            _filterItems = ViewModel.DailyTotals!.ToHashSet();
            _filterDefinition = new FilterDefinition<StateDailyTotal>
                {
                    FilterFunction = x => _filterItems.Contains(x)
                };
            StateHasChanged();
        }
        // if(firstRender)
        // {
        //     if(_datePicker != null)
        //     {
        //         _datePicker.GoToDate();
        //     }
        // }

        // if (_datePicker != null)
        // {
        //     _datePicker.GoToDate(_currentDate);
        //     //StateHasChanged();
        // }

        base.OnAfterRender(firstRender);
    }

    void DaySelected(DateTime? newDate)
    {

    }

    void OpenStateFilter()
    {
        _stateFilterOpen = true;
    }

    async void OpenDateFilter()
    {
        _dateFilterOpen = true;
        if (_datePicker != null && ViewModel.CurrentDate.HasValue)
        {
            await Task.Delay(100);
            await _datePicker.GoToDate(ViewModel.CurrentDate.Value);
            StateHasChanged();
        }
    }

    void OpeningDatePicker()
    {
        
    }

    private async Task ApplyFilterAsync(FilterContext<StateDailyTotal> context)
    {
        _filterItems = _selectedItems.ToHashSet();
        _icon = _filterItems.Count == ViewModel.DailyTotals.Count() ? Icons.Material.Outlined.FilterAlt : Icons.Material.Filled.FilterAlt;
        await context.Actions.ApplyFilterAsync(_filterDefinition);
        _stateFilterOpen = false;
    }

    private async Task ClearFilterAsync(FilterContext<StateDailyTotal> context)
    {
        _selectedItems = ViewModel.DailyTotals.ToHashSet();
        _filterItems = ViewModel.DailyTotals.ToHashSet();
        _icon = Icons.Material.Outlined.FilterAlt;
        await context.Actions.ClearFilterAsync(_filterDefinition);
        _stateFilterOpen = false;
    }

    private void SelectedChanged(bool value, StateDailyTotal item)
    {
        if (value)
            _selectedItems.Add(item);
        else
            _selectedItems.Remove(item);

        if (_selectedItems.Count == ViewModel.DailyTotals.Count())
            _selectAll = true;
        else
            _selectAll = false;
    }

    private void SelectAll(bool value)
    {
        _selectAll = value;

        if (value)
        {
            _selectedItems = ViewModel.DailyTotals.ToHashSet();
        }
        else
        {
            _selectedItems.Clear();
        }
    }
}
