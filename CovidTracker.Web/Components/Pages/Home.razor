@page "/{PageDateFilter:datetime?}"
@inherits ViewModelComponentBase<HomeViewModel>

<PageTitle>Covid Tracker</PageTitle>

<MudStack>
    <MudText Typo="Typo.h3">Covid statistics by State</MudText>

    <MudDataGrid @ref="_dataGrid" Loading="_loading" T="StateDailyTotalViewModel" Items="@ViewModel.DailyTotals" Filterable="true" FilterMode="@DataGridFilterMode.ColumnFilterRow" SortMode="SortMode.Single">
        <Columns>
            <PropertyColumn Property="x => x.Date" Title="Date" Sortable="false">
                <FilterTemplate>
                    <MudStack Row="true" Justify="Justify.FlexStart" AlignItems="AlignItems.Center">
                        <MudText Typo="Typo.body1">@ViewModel.CurrentDate?.ToString("M/d/yyyy")</MudText>
                        <MudIconButton OnClick="@OpenDateFilter" Icon="@Icons.Material.Outlined.FilterAlt" Size="@Size.Small" /> 
                    </MudStack>
                    <MudOverlay Visible="_dateFilterOpen" LightBackground="false" OnClick="@(() => _dateFilterOpen = false)" />
                    <MudPopover Open="@_dateFilterOpen" AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopCenter" Style="">
                        <MudStack Spacing="0">
                            <MudDatePicker 
                                DateChanged="FilterDateChanged" 
                                @ref="_datePicker"
                                MaxDate="ViewModel.MaxDate"
                                MinDate="ViewModel.MinDate"
                                PickerVariant="PickerVariant.Static"
                                 />
                            <MudStack Row="true" Justify="Justify.Center">
                                <MudButton OnClick="@(() => _dateFilterOpen = false)" FullWidth="true">Cancel</MudButton>
                            </MudStack>
                        </MudStack>
                    </MudPopover>
                </FilterTemplate>
            </PropertyColumn>
            <PropertyColumn Property="x => x.State" Title="State" Sortable="true">
                <FilterTemplate>
                    <DataGridStringFilterTemplate 
                        T="StateDailyTotalViewModel" 
                        Context="context" 
                        AllItems="ViewModel.States" 
                        GetStringFromType="(t) => t.State" 
                        GetColumnLabel="GetStateFilterLabel" />
                </FilterTemplate>
            </PropertyColumn>
            <PropertyColumn Property="x => x.TotalCases" Format="N0" Title="Total" Sortable="true" Filterable="true" />
            <PropertyColumn Property="x => x.PositiveCases" Format="N0" Title="Positive" Sortable="true" Filterable="true" />
            <PropertyColumn Property="x => x.NegativeCases" Format="N0" Title="Negative" Sortable="true" Filterable="true" />
            <PropertyColumn Property="x => x.HospitalizationRate" Format="P2" Title="Hospitalization Rates" Sortable="true" Filterable="true" />
        </Columns>
        <LoadingContent>
            <MudStack Row="true" Justify="Justify.Center" AlignItems="AlignItems.Center">
                <MudIcon Size="Size.Large" Icon="@Icons.Material.Outlined.EventNote"/>
                <MudText Typo="Typo.h4">Retrieving Covid Data...</MudText>
            </MudStack>
        </LoadingContent>
        <NoRecordsContent>
            <MudText>No records found. Please check your filter settings.</MudText>
        </NoRecordsContent>
        <PagerContent>
            <MudDataGridPager T="StateDailyTotalViewModel" />
        </PagerContent>
    </MudDataGrid>

    <MudText Typo="Typo.caption">Data provided by covidstatistics.com</MudText> 
</MudStack>


@code
{
    [Parameter]
    public DateTime? PageDateFilter { get; set; }

    MudDataGrid<StateDailyTotalViewModel>? _dataGrid;
    MudDatePicker? _datePicker;
    bool _loading = true;
    bool _dateFilterOpen = false;

    protected override async Task OnInitializedAsync()
    {
        await ViewModel.LoadSummaryData();
        await base.OnInitializedAsync();
    }
    protected override void OnParametersSet()
    {
        if(PageDateFilter.HasValue)
        {
            ViewModel.CurrentDate = PageDateFilter.Value;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            await LoadData();

            // Set the default sort on the datagrid
            await _dataGrid!.SetSortAsync("PositiveCases", SortDirection.Descending, x => x.PositiveCases, new MudBlazor.Utilities.NaturalComparer());

            StateHasChanged();
        }

        base.OnAfterRender(firstRender);
    }

    async Task FilterDateChanged(DateTime? newDate)
    {
        if (newDate?.Date != ViewModel.CurrentDate?.Date)
        {
            _dateFilterOpen = false;
            ViewModel.CurrentDate = newDate;
            await LoadData();
        }
    }

    async Task LoadData()
    {
        _loading = true;
        StateHasChanged();
        await ViewModel.LoadDailyData();
        _loading = false;
    }

    async Task OpenDateFilter()
    {
        _dateFilterOpen = true;

        // This works around a bug where the date picker will not show the bound date when first displayed and set to static mode
        // Wait for up to one second for the Date Picker to be materialized so we can scroll to the current date
        var elapsed = 0;
        do
        {
            await Task.Delay(10);
            elapsed += 10;
        } while (_datePicker == null && elapsed < 1000);



        if (_datePicker != null && ViewModel.CurrentDate.HasValue)
        {
            await _datePicker.GoToDate(ViewModel.CurrentDate.Value);
            StateHasChanged();
        }
    }

    string GetStateFilterLabel(int totalItems, Func<List<string>> getFilteredItems)
    {
        var filteredItems = getFilteredItems();
        var count = filteredItems.Count;

        return count switch
        {
            _ when count == totalItems => "All",
            0 => "No States Selected",
            <= 4 => string.Join(",", filteredItems.Take(count)),
            > 4 => "Multiple"
        };
    }

}
